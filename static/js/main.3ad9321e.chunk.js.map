{"version":3,"sources":["lib/env.ts","components/Glow.tsx","hooks/UserInfoContextController.ts","hooks/UserJWTContextController.ts","hooks/SavedSpreadNeedReloadContextController.ts","components/GoogleOAuth/Login.tsx","utils/refreshToken.ts","hooks/PastSpreadsContextController.ts","components/GoogleOAuth/Logout.tsx","components/Header.tsx","hooks/DrawnCardsContextController.ts","components/Card.tsx","components/CardMat.tsx","utils/EPopupMenus.ts","hooks/PopoutContextController.ts","hooks/DisplayedMenuContextController.ts","components/CommandBar.tsx","components/SpreadInfo.tsx","components/SaveSpread.tsx","components/PastSpread.tsx","components/Popout.tsx","components/App.tsx","index.tsx"],"names":["config","path","resolve","__dirname","process","Glow","origClassName","className","child","children","toggle","glowStyle","style","useState","hovered","setHovered","clicked","setClicked","React","Children","count","Error","toggleHover","toggleClick","currentTimeout","clearTimeout","setTimeout","glowHoverIntesifier","passeedDownClasses","props","childWithBlur","cloneElement","childMain","glowIconClickedDrop","onMouseDown","undefined","onMouseEnter","onMouseLeave","UserInfoContext","createContext","setUserInfo","UserInfoProvider","Provider","JwtContext","jwt","setJwt","JWTProvider","SavedSpreadNeedReloadContext","needReload","setNeedReload","SavedSpreadNeedReloadProvider","clientId","Login","useContext","buttonText","onSuccess","res","console","log","isSignedIn","username","profileObj","givenName","imgUrl","imageUrl","tokenId","fetch","method","headers","authorization","then","json","data","success","error","catch","e","refreshTiming","tokenObj","expires_in","refreshToken","a","reloadAuthResponse","newAuthRes","id_token","refreshTokenSetup","onFailure","cookiePolicy","PastSpreadsContext","pastSpreads","setPastSpreads","PastSpreadsProvider","Logout","onLogoutSuccess","Header","userInfo","src","alt","display","justifySelf","value","DrawnCardContext","cardsDrawn","setCardsDrawn","DrawnCardProvider","Card","name","element","suit","cardDirectionStyle","height","maxWidth","justifyContent","width","CardMat","EPopupMenus","map","cardDrawn","indx","card_meaning_up","transform","card_name","PopoutContext","popout","setPopout","PopoutProvider","DisplayedMenuContext","displayedMenu","setDisplayedMenu","DisplayedMenuProvider","CommandBar","lastClickedMenu","setLastClickedMenu","onClick","response","cardResponse","PastSpread","SpreadInfo","SaveSpread","card_meaning_down","selectedVal","setSelectedVal","selectMenuRef","useRef","errorMessageRef","handleSelectOnClick","current","size","target","onSubmit","event","preventDefault","length","body","JSON","stringify","cards","id","spreadId","spreadDir","Date","setTime","availDate","innerText","availTime","htmlFor","ref","onChange","type","disabled","useEffect","pastSpreadData","cardDirections","formattedSpreads","i","direction","split","push","colSpan","date_drawn","getTime","getTimezoneOffset","toLocaleDateString","card_one_spread_meaning","card_two_spread_meaning","card_three_spread_meaning","formattedSavedSpreads","Popout","popoutOpen","popoutInitialClick","getCurrentDisplayedMenuElement","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ad9321e.chunk.js","sourcesContent":["import { resolve } from \"path\";\r\nimport { config } from \"dotenv\";\r\n\r\nconfig({ path: resolve( __dirname, \"../../.env\" ) });\r\nconfig({ path: resolve( __dirname, `../../.env.${ process.env.NODE_ENV }` ) });","import React, { useState } from \"react\";\r\nimport \"../styles/Glow.css\";\r\n\r\ntype MyProps = {\r\n\ttoggle?: boolean;\r\n\tclassName?: string;\r\n\tstyle ?: React.CSSProperties\r\n}\r\n\r\ntype WithChildren<T extends Record<string, unknown>> = T & {\r\n\tchildren: React.ReactElement<MyProps>\r\n}\r\n\r\nfunction Glow({\r\n\tclassName: origClassName,\r\n\tchildren : child,\r\n\ttoggle,\r\n\tstyle : glowStyle,\r\n}: WithChildren<MyProps> ): JSX.Element {\r\n\t//click and hover state of glow icons\r\n\tconst [hovered, setHovered] = useState( false );\r\n\tconst [clicked, setClicked] = useState( false );\r\n\r\n\tif ( React.Children.count( child ) !== 1 ) {\r\n\t\tthrow new Error( \"💥 Glow effect can only have one child element.\" );\r\n\t}\r\n\r\n\tconst toggleHover = () => {\r\n\t\tsetHovered( !hovered );\r\n\t};\r\n\r\n\tconst toggleClick = ( function () {\r\n\t\tlet currentTimeout: NodeJS.Timeout;\r\n\r\n\t\treturn function () {\r\n\t\t\tsetClicked( true );\r\n\t\t\tif ( currentTimeout ) {\r\n\t\t\t\tclearTimeout( currentTimeout );\r\n\t\t\t}\r\n\t\t\tcurrentTimeout = setTimeout(() => {\r\n\t\t\t\tsetClicked( false );\r\n\t\t\t}, 150 );\r\n\t\t};\r\n\t})();\r\n\r\n\tconst glowHoverIntesifier = hovered ? \"increase-glow\" : \"\";\r\n\tconst passeedDownClasses = child.props.className || \"\";\r\n\r\n\t//attach a toggle and click handle if the Glow element toggle prop true\r\n\tconst childWithBlur = React.cloneElement(\r\n\t\tchild,\r\n\t\ttoggle ?\r\n\t\t\t{\r\n\t\t\t\tclassName: `${ glowHoverIntesifier } ${ passeedDownClasses } abs-blur`,\r\n\t\t\t}\r\n\t\t\t:\r\n\t\t\t{\r\n\t\t\t\tclassName: `${ passeedDownClasses } abs-blur`,\r\n\t\t\t},\r\n\t);\r\n\r\n\tconst childMain = React.cloneElement( child, {\r\n\t\tclassName: child.props.className,\r\n\t});\r\n\r\n\tconst glowIconClickedDrop = clicked ? \"clicked-glow\" : \"\";\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tonMouseDown={toggle ? toggleClick : undefined}\r\n\t\t\tonMouseEnter={toggleHover}\r\n\t\t\tonMouseLeave={toggleHover}\r\n\t\t\tclassName={`glow-container ${ origClassName || \"\" } ${ glowIconClickedDrop }`}\r\n\t\t\tstyle={glowStyle}\r\n\t\t>\r\n\t\t\t{childWithBlur}\r\n\t\t\t{childMain}\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default Glow;\r\n","import { createContext } from \"react\";\r\n\r\nexport const UserInfoContext = createContext(\r\n\t{\r\n\t\tsetUserInfo: undefined as unknown as React.Dispatch<React.SetStateAction<DajekiTarotUser>>,\r\n\t});\r\nexport const UserInfoProvider = UserInfoContext.Provider;","import { createContext } from \"react\";\r\n\r\nexport const JwtContext = createContext(\r\n\t{\r\n\t\tjwt   : \"\",\r\n\t\tsetJwt: undefined as unknown as React.Dispatch<React.SetStateAction<string>>,\r\n\t});\r\nexport const JWTProvider = JwtContext.Provider;","import { createContext } from \"react\";\r\n\r\nexport const SavedSpreadNeedReloadContext = createContext({\r\n\tneedReload   : true,\r\n\tsetNeedReload: undefined as unknown as React.Dispatch<React.SetStateAction<boolean>>,\r\n});\r\nexport const SavedSpreadNeedReloadProvider = SavedSpreadNeedReloadContext.Provider;","import { useContext } from \"react\";\r\nimport { UserInfoContext } from \"../../hooks/UserInfoContextController\";\r\nimport { JwtContext } from \"../../hooks/UserJWTContextController\";\r\nimport GoogleLogin, { GoogleLoginResponse, GoogleLoginResponseOffline } from \"react-google-login\";\r\nimport { refreshTokenSetup } from \"../../utils/refreshToken\";\r\nimport { SavedSpreadNeedReloadContext } from \"../../hooks/SavedSpreadNeedReloadContextController\";\r\n\r\n\r\nconst clientId = process.env.REACT_APP_CLIENT_ID;\r\n\r\nfunction Login(): JSX.Element {\r\n\t/*\r\n\t *\tOn successful login or when login still available, send the information to the backend and make sure that user is registered\r\n\t *\tSetup the automatic refresh for the token based on the current response expires_in in the auth response.\r\n\t */\r\n\r\n\tif ( clientId === undefined ) {\r\n\t\tthrow new Error( \"Must set REACT_APP_CLIENT_ID in .env file in project root.\" );\r\n\t}\r\n\r\n\t//Context provided from header element.\r\n\tconst { setUserInfo } = useContext( UserInfoContext );\r\n\tconst { setJwt } = useContext( JwtContext );\r\n\tconst { setNeedReload } = useContext( SavedSpreadNeedReloadContext );\r\n\r\n\tfunction onSuccess( res: GoogleLoginResponse | GoogleLoginResponseOffline ) {\r\n\t\tconsole.log( \"[Login Success] Current User:\", res as GoogleLoginResponse );\r\n\r\n\t\t//Check to make sure the response is a GoogleLoginResponse and that the user is actually signed in.\r\n\t\tif ( \"profileObj\" in res && res.isSignedIn()) {\r\n\r\n\t\t\tsetUserInfo({ username: res.profileObj.givenName, imgUrl: res.profileObj.imageUrl });\r\n\t\t\tsetJwt( res.tokenId );\r\n\t\t\tsetNeedReload( true );\r\n\r\n\t\t\tfetch( `${ process.env.REACT_APP_API_URL }/userInfo/login`, {\r\n\t\t\t\tmethod : \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tauthorization: `Bearer ${ res.tokenId }`,\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t\t\t.then( res => res.json())\r\n\t\t\t\t.then( data =>\r\n\t\t\t\t\tconsole.log( data.success ? `Success: ${ data.success }` : \"\", data.error ? `Error: ${ data.error }` : \"\" ),\r\n\t\t\t\t)\r\n\t\t\t\t.catch( e => console.log( e ));\r\n\r\n\t\t\t//send the setJwt action so the refresh can also update the memory\r\n\t\t\trefreshTokenSetup( res as GoogleLoginResponse, setJwt );\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onFailure( res: GoogleLoginResponse ) {\r\n\t\tconsole.log( \"[Login Success] Already Logged In:\", res );\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<GoogleLogin\r\n\t\t\t\tclientId={clientId}\r\n\t\t\t\tbuttonText=\"Login\"\r\n\t\t\t\tonSuccess={onSuccess}\r\n\t\t\t\tonFailure={onFailure}\r\n\t\t\t\tcookiePolicy={\"single_host_origin\"}\r\n\t\t\t\tisSignedIn={true}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Login;","import { GoogleLoginResponse } from \"react-google-login\";\r\n\r\nexport function refreshTokenSetup( res: GoogleLoginResponse, setJwt: React.Dispatch<React.SetStateAction<string>> ): void {\r\n\t//How long till we need to refresh the token\r\n\tlet refreshTiming = ( res.tokenObj.expires_in || 3600 - 5 * 60 ) * 1000;\r\n\r\n\tasync function refreshToken() {\r\n\t\tconst newAuthRes = await res.reloadAuthResponse();\r\n\t\trefreshTiming = ( newAuthRes.expires_in || 3600 - 5 * 60 ) * 1000;\r\n\r\n\t\tconsole.log( \"newAuthRes:\", newAuthRes );\r\n\t\tconsole.log( \"new auth token\", newAuthRes.id_token );\r\n\r\n\t\tsetJwt( newAuthRes.id_token );\r\n\t\t//Setup the next timer after the first one\r\n\t\tsetTimeout( refreshToken, refreshTiming );\r\n\t}\r\n\r\n\t//setup initial refresh\r\n\tsetTimeout( refreshToken, refreshTiming );\r\n}\r\n","import { createContext } from \"react\";\r\n\r\nexport const PastSpreadsContext = createContext({\r\n\tpastSpreads   : [{}] as PastSpreadsApiReturn[],\r\n\tsetPastSpreads: undefined as unknown as React.Dispatch<React.SetStateAction<PastSpreadsApiReturn[]>>,\r\n});\r\nexport const PastSpreadsProvider = PastSpreadsContext.Provider;","import { useContext } from \"react\";\r\nimport { GoogleLogout } from \"react-google-login\";\r\nimport { JwtContext } from \"../../hooks/UserJWTContextController\";\r\nimport { UserInfoContext } from \"../../hooks/UserInfoContextController\";\r\nimport { PastSpreadsContext } from \"../../hooks/PastSpreadsContextController\";\r\nimport { SavedSpreadNeedReloadContext } from \"../../hooks/SavedSpreadNeedReloadContextController\";\r\n\r\nconst clientId = process.env.REACT_APP_CLIENT_ID as string;\r\n\r\nfunction Logout(): JSX.Element {\r\n\r\n\tconst { setUserInfo } = useContext( UserInfoContext );\r\n\tconst { setJwt } = useContext( JwtContext );\r\n\tconst { setPastSpreads } = useContext( PastSpreadsContext );\r\n\tconst { setNeedReload } = useContext( SavedSpreadNeedReloadContext );\r\n\r\n\tfunction onSuccess() {\r\n\t\tsetUserInfo({ username: \"\", imgUrl: \"\" });\r\n\t\tsetJwt( \"\" );\r\n\t\tsetPastSpreads( [{}] as PastSpreadsApiReturn[] );\r\n\t\tsetNeedReload( true );\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<GoogleLogout\r\n\t\t\t\tclientId={clientId}\r\n\t\t\t\tbuttonText=\"Logout\"\r\n\t\t\t\tonLogoutSuccess={onSuccess}\r\n\t\t\t></GoogleLogout>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Logout;\r\n","import { useState } from \"react\";\r\nimport \"../styles/Header.css\";\r\nimport Glow from \"./Glow\";\r\nimport Login from \"./GoogleOAuth/Login\";\r\nimport Logout from \"./GoogleOAuth/Logout\";\r\nimport { UserInfoProvider } from \"../hooks/UserInfoContextController\";\r\n\r\n\r\nfunction Header(): JSX.Element {\r\n\tconst [userInfo, setUserInfo] = useState({ username: \"\", imgUrl: \"\" });\r\n\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<img\r\n\t\t\t\tclassName={\"logo\"}\r\n\t\t\t\tsrc={`${ process.env.PUBLIC_URL  }/images/symbols/crystalball.svg`}\r\n\t\t\t\talt=\"Crystal Ball with eye in center\"\r\n\t\t\t/>\r\n\t\t\t<Glow className=\"title\">\r\n\t\t\t\t<h1>Dajeki Tarot</h1>\r\n\t\t\t</Glow>\r\n\t\t\t<div className={\"username\"}>\r\n\t\t\t\t<img className={\"profilePic\"} src={userInfo.imgUrl} />\r\n\t\t\t\t<Glow style={{ display: \"inline-block\", justifySelf: \"flex-end\" }}>\r\n\t\t\t\t\t<h3 >{userInfo.username}</h3>\r\n\t\t\t\t</Glow>\r\n\t\t\t</div>\r\n\t\t\t<div className={\"userServicesSection\"}>\r\n\t\t\t\t<UserInfoProvider value={{ setUserInfo }}>\r\n\t\t\t\t\t{( userInfo.username ) ? <Logout /> : <Login />}\r\n\t\t\t\t</UserInfoProvider>\r\n\t\t\t</div>\r\n\t\t</header>\r\n\t);\r\n}\r\n\r\nexport default Header;\r\n","import { createContext } from \"react\";\r\n\r\nexport const DrawnCardContext = createContext({\r\n\tcardsDrawn   : undefined as unknown as CardApiReturn[],\r\n\tsetCardsDrawn: undefined as unknown as React.Dispatch<React.SetStateAction<CardApiReturn[]>>,\r\n});\r\nexport const DrawnCardProvider = DrawnCardContext.Provider;","import \"../styles/Card.css\";\r\nimport Glow from \"./Glow\";\r\n\r\ntype cardProp = {\r\n\tname?: string,\r\n\telement?: TarotElements,\r\n\tsuit?: TarotSuits,\r\n\tstyle?: React.CSSProperties,\r\n}\r\n\r\nfunction Card({ name, element, suit, style:cardDirectionStyle } : cardProp ): JSX.Element {\r\n\r\n\treturn (\r\n\t\t<div className={\"card fade-in-bottom-rotate default-border-radius\"}>\r\n\t\t\t<h4>{name}</h4>\r\n\t\t\t<img\r\n\t\t\t\tsrc={\r\n\t\t\t\t\t`${ process.env.PUBLIC_URL }/images/rider-waite/front/${ suit }/${ name }.jpg`\r\n\t\t\t\t}\r\n\t\t\t\talt={\"\"}\r\n\t\t\t\tstyle={{ ...cardDirectionStyle, height: \"100%\", maxWidth: \"100%\" }}\r\n\t\t\t/>\r\n\t\t\t<div\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tdisplay       : \"flex\",\r\n\t\t\t\t\tjustifyContent: \"space-evenly\",\r\n\t\t\t\t\twidth         : \"100%\",\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Glow>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tclassName={\"icon-50px\"}\r\n\t\t\t\t\t\tsrc={`${ process.env.PUBLIC_URL }/images/symbols/elements/${ element }.svg`}\r\n\t\t\t\t\t\talt={\"\"}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Glow>\r\n\t\t\t\t<Glow>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tclassName={\"icon-50px\"}\r\n\t\t\t\t\t\tsrc={`${ process.env.PUBLIC_URL }/images/symbols/suits/${ suit }.svg`}\r\n\t\t\t\t\t\talt={\"\"}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Glow>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n","import { useContext } from \"react\";\r\nimport { DrawnCardContext } from \"../hooks/DrawnCardsContextController\";\r\nimport \"../styles/CardMat.css\";\r\nimport Card from \"./Card\";\r\n\r\nfunction CardMat(): JSX.Element {\r\n\r\n\tconst { cardsDrawn } = useContext( DrawnCardContext );\r\n\r\n\treturn (\r\n\t\t<div className={\"mat default-border-radius\"}>\r\n\t\t\t{\r\n\t\t\t\tcardsDrawn.map(( cardDrawn, indx ) => (\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tstyle={( cardDrawn.card_meaning_up ) ? {} : { transform: \"rotate(180deg)\" }}\r\n\t\t\t\t\t\tname={cardDrawn.card_name}\r\n\t\t\t\t\t\telement={cardDrawn.element}\r\n\t\t\t\t\t\tsuit={cardDrawn.suit}\r\n\t\t\t\t\t\tkey={indx}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardMat;\r\n","export enum EPopupMenus {\r\n\tSpreadInfo,\r\n\tPastSpread,\r\n\tSaveSpread\r\n}\r\n","import { createContext } from \"react\";\r\n\r\nexport const PopoutContext = createContext(\r\n\t{\r\n\t\tpopout   : undefined as unknown as [boolean, boolean],\r\n\t\tsetPopout: undefined as unknown as React.Dispatch<React.SetStateAction<[boolean, boolean]>>,\r\n\t});\r\nexport const PopoutProvider = PopoutContext.Provider;","import { createContext } from \"react\";\r\nimport { EPopupMenus } from \"../utils/EPopupMenus\";\r\n\r\nexport const DisplayedMenuContext = createContext({\r\n\tdisplayedMenu   : undefined as unknown as EPopupMenus,\r\n\tsetDisplayedMenu: undefined as unknown as React.Dispatch<React.SetStateAction<EPopupMenus>>,\r\n});\r\nexport const DisplayedMenuProvider = DisplayedMenuContext.Provider;\r\n","import \"../styles/CommandBar.css\";\r\nimport { useContext, useState } from \"react\";\r\nimport Glow from \"./Glow\";\r\nimport { PopoutContext } from \"../hooks/PopoutContextController\";\r\nimport { DrawnCardContext } from \"../hooks/DrawnCardsContextController\";\r\nimport { DisplayedMenuContext } from \"../hooks/DisplayedMenuContextController\";\r\n\r\nimport { EPopupMenus } from \"../utils/EPopupMenus\";\r\n\r\n// TODO: Setup functionality for elements Save, previous spreads, information\r\nfunction CommandBar(): JSX.Element {\r\n\r\n\tconst { setPopout } = useContext( PopoutContext );\r\n\tconst { setCardsDrawn } = useContext( DrawnCardContext );\r\n\tconst { setDisplayedMenu } = useContext( DisplayedMenuContext );\r\n\r\n\tconst [lastClickedMenu, setLastClickedMenu] = useState( undefined as unknown as EPopupMenus );\r\n\r\n\treturn (\r\n\t\t<footer>\r\n\t\t\t<div className={\"commandBar default-border-radius\"}>\r\n\r\n\t\t\t\t<Glow toggle={true}>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tonClick={async () => {\r\n\t\t\t\t\t\t\tconst response = await fetch( `${ process.env.REACT_APP_API_URL }/cards/3` );\r\n\t\t\t\t\t\t\tconst cardResponse: CardApiReturn[] | { error: string } = await response.json();\r\n\r\n\t\t\t\t\t\t\t//If there is an error property in the object we need to display that instead of messing with the cardsDrawn array\r\n\t\t\t\t\t\t\tif ( \"error\" in cardResponse ) {\r\n\t\t\t\t\t\t\t\tconsole.log( cardResponse.error );\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tsetCardsDrawn( [] );\r\n\t\t\t\t\t\t\tsetCardsDrawn( cardResponse );\r\n\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tclassName={\"icon-50px\"}\r\n\t\t\t\t\t\tsrc={`${ process.env.PUBLIC_URL }/images/symbols/action/drawcard.svg`}\r\n\t\t\t\t\t\talt={\"\"}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Glow>\r\n\r\n\r\n\t\t\t\t<Glow toggle={true}>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tif ( +lastClickedMenu === EPopupMenus.PastSpread ) {\r\n\t\t\t\t\t\t\t\tsetPopout( [false, false] );\r\n\t\t\t\t\t\t\t\t//-1 to reset the enum last clicked so buttons work to open the menu back up.\r\n\t\t\t\t\t\t\t\tsetLastClickedMenu( -1 );\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tsetPopout( [true, false] );\r\n\t\t\t\t\t\t\tsetDisplayedMenu( EPopupMenus.PastSpread );\r\n\t\t\t\t\t\t\tsetLastClickedMenu( EPopupMenus.PastSpread );\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tclassName={\"icon-50px\"}\r\n\t\t\t\t\t\tsrc={`${ process.env.PUBLIC_URL }/images/symbols/action/shuffle.svg`}\r\n\t\t\t\t\t\talt={\"\"}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Glow>\r\n\r\n\t\t\t\t<Glow toggle={true}>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tonClick={() => {\r\n\r\n\t\t\t\t\t\t\tif ( +lastClickedMenu === EPopupMenus.SpreadInfo ) {\r\n\t\t\t\t\t\t\t\tsetPopout( [false, false] );\r\n\t\t\t\t\t\t\t\t//-1 to reset the enum last clicked so buttons work to open the menu back up.\r\n\t\t\t\t\t\t\t\tsetLastClickedMenu( -1 );\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tsetPopout( [true, false] );\r\n\t\t\t\t\t\t\tsetDisplayedMenu( EPopupMenus.SpreadInfo );\r\n\t\t\t\t\t\t\tsetLastClickedMenu( EPopupMenus.SpreadInfo );\r\n\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tclassName={\"icon-50px\"}\r\n\t\t\t\t\t\tsrc={`${ process.env.PUBLIC_URL }/images/symbols/action/tarotspread.svg`}\r\n\t\t\t\t\t\talt={\"\"}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Glow>\r\n\r\n\t\t\t\t<Glow toggle={true}>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tonClick={() => {\r\n\r\n\t\t\t\t\t\t\tif ( +lastClickedMenu === EPopupMenus.SaveSpread ) {\r\n\t\t\t\t\t\t\t\tsetPopout( [false, false] );\r\n\t\t\t\t\t\t\t\t//-1 to reset the enum last clicked so buttons work to open the menu back up.\r\n\t\t\t\t\t\t\t\tsetLastClickedMenu( -1 );\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tsetPopout( [true, false] );\r\n\t\t\t\t\t\t\tsetDisplayedMenu( EPopupMenus.SaveSpread );\r\n\t\t\t\t\t\t\tsetLastClickedMenu( EPopupMenus.SaveSpread );\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tclassName={\"icon-50px\"}\r\n\t\t\t\t\t\tsrc={`${ process.env.PUBLIC_URL }/images/symbols/action/savespread.svg`}\r\n\t\t\t\t\t\talt={\"\"}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Glow>\r\n\t\t\t</div>\r\n\t\t</footer>\r\n\t);\r\n}\r\n\r\nexport default CommandBar;\r\n","import React, { useContext } from \"react\";\r\nimport { DrawnCardContext } from \"../hooks/DrawnCardsContextController\";\r\n\r\nimport \"../styles/SpreadInfo.css\";\r\n\r\nfunction SpreadInfo(): JSX.Element {\r\n\r\n\tconst { cardsDrawn } = useContext( DrawnCardContext );\r\n\r\n\treturn (\r\n\t\t<div className={\"spreadContainer\"}>\r\n\t\t\t{\r\n\t\t\t\tcardsDrawn.map(( cardDrawn, indx ) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div key={indx} className={\"spreadInfo\"}>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<img src={`${ process.env.PUBLIC_URL }/images/symbols/cards.svg`} />\r\n\t\t\t\t\t\t\t\t<h4 style={{ display: \"inline-block\" }}>{`Card ${ indx + 1 } Meaning`}</h4>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<img src={`${ process.env.PUBLIC_URL }/images/symbols/elements/${ cardDrawn.element }.svg`} />\r\n\t\t\t\t\t\t\t\t<img src={`${ process.env.PUBLIC_URL }/images/symbols/${ ( cardDrawn.card_meaning_up ) ? \"uparrow\" : \"downarrow\" }.svg`} />\r\n\t\t\t\t\t\t\t\t<img src={`${ process.env.PUBLIC_URL }/images/symbols/suits/${ cardDrawn.suit }.svg`} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<h5>{cardDrawn.card_name}</h5>\r\n\t\t\t\t\t\t\t<p>{cardDrawn.card_meaning_up ?? cardDrawn.card_meaning_down}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SpreadInfo;\r\n","import { FormEvent, useContext, useState, useRef, MouseEvent } from \"react\";\r\nimport { DrawnCardContext } from \"../hooks/DrawnCardsContextController\";\r\nimport { SavedSpreadNeedReloadContext } from \"../hooks/SavedSpreadNeedReloadContextController\";\r\nimport { JwtContext } from \"../hooks/UserJWTContextController\";\r\n\r\nimport \"../styles/SaveSpread.css\";\r\n\r\nfunction SaveSpread(): JSX.Element {\r\n\r\n\tconst [selectedVal, setSelectedVal] = useState( \"0\" );\r\n\tconst { cardsDrawn } = useContext( DrawnCardContext );\r\n\tconst { jwt } = useContext( JwtContext );\r\n\tconst { setNeedReload } = useContext( SavedSpreadNeedReloadContext );\r\n\r\n\tconst selectMenuRef = useRef<HTMLSelectElement>( null );\r\n\t//Used for adding error responses\r\n\tconst errorMessageRef = useRef<HTMLDivElement>( null );\r\n\r\n\t/**\r\n\t * Send to the backend in form of\r\n\t * {\r\n\t * \tcards : numbers[] //Array of card ID's\r\n\t * \tspreadId : number //Value from spread meaning dropdown correlating to same backend ID\r\n\t *  spreadDir: string //String bitmap for 1 as up and 0 as down\r\n\t * }\r\n\t */\r\n\tfunction saveSpreadFormSubmit( event: FormEvent<HTMLFormElement> ) {\r\n\t\tevent.preventDefault();\r\n\t\t//check to make sure they have drawn something.\r\n\t\tif ( cardsDrawn.length ) {\r\n\r\n\t\t\tfetch( `${ process.env.REACT_APP_API_URL }/cards/save_spread`, {\r\n\t\t\t\tmethod : \"PUT\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t\tauthorization : `Bearer ${ jwt }`,\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tcards    : [cardsDrawn[0].id, cardsDrawn[1].id, cardsDrawn[2].id],\r\n\t\t\t\t\tspreadId : selectedVal,\r\n\t\t\t\t\t//This is the bitmap string\r\n\t\t\t\t\tspreadDir: `${ cardsDrawn[0].card_meaning_up ? 1 : 0 }${ cardsDrawn[1].card_meaning_up ? 1 : 0 }${ cardsDrawn[2].card_meaning_up ? 1 : 0 }`,\r\n\t\t\t\t}),\r\n\r\n\t\t\t})\r\n\t\t\t\t.then( res => res.json())\r\n\t\t\t\t.then( data => {\r\n\t\t\t\t\tconst utcd = new Date();\r\n\t\t\t\t\tutcd.setTime( data.availDate );\r\n\t\t\t\t\t//If there is an error in this object for this response, it could come with an availTime telling how long in hours till next save.\r\n\t\t\t\t\tif ( errorMessageRef.current && data.error ) {\r\n\t\t\t\t\t\terrorMessageRef.current.innerText =\r\n\t\t\t\t\t\t( data.error ? `${ data.error }` : \"\" ) +\r\n\t\t\t\t\t\t( data.availTime ?\r\n\t\t\t\t\t\t\t`\\nCome back in ${ data.availTime } hours`\r\n\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\"\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( errorMessageRef.current && data.success ) {\r\n\t\t\t\t\t\terrorMessageRef.current.innerText = data.success;\r\n\t\t\t\t\t\tsetNeedReload( true );\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tfunction handleSelectOnClick( e: MouseEvent<HTMLSelectElement | HTMLDivElement> ) {\r\n\t\tif( selectMenuRef.current ) {\r\n\t\t\tselectMenuRef.current.size = selectMenuRef.current.size === 9 ? 1 : 9;\r\n\t\t}\r\n\t\tif( +( e.target as HTMLSelectElement ).value >= 0 ) {\r\n\t\t\tsetSelectedVal(( e.target as HTMLSelectElement ).value );\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={\"saveSpread\"}>\r\n\t\t\t<form onSubmit={saveSpreadFormSubmit}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<label htmlFor=\"spreadType\"><h3>Spread Meaning</h3></label>\r\n\t\t\t\t\t<div className={\"customSelect\"}>\r\n\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\tvalue={selectedVal}\r\n\t\t\t\t\t\t\tclassName=\"spreadSelect\"\r\n\t\t\t\t\t\t\tid=\"spreadType\"\r\n\t\t\t\t\t\t\tref={selectMenuRef}\r\n\t\t\t\t\t\t\tonMouseDown={handleSelectOnClick}\r\n\t\t\t\t\t\t\tonChange={() => { return; }} //onMouseDown handles the onChange one source of truth for custom select menu.\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<option value=\"0\"></option>\r\n\t\t\t\t\t\t\t<option value=\"1\">Past, Present, Future</option>\r\n\t\t\t\t\t\t\t<option value=\"2\">Nature, Cause, Solution</option>\r\n\t\t\t\t\t\t\t<option value=\"3\">Situation, Obstacle, Advice</option>\r\n\t\t\t\t\t\t\t<option value=\"4\">Current Standing, Aspire, How</option>\r\n\t\t\t\t\t\t\t<option value=\"5\">You, Person, Relationship</option>\r\n\t\t\t\t\t\t\t<option value=\"6\">Strength, Weakness, Advice</option>\r\n\t\t\t\t\t\t\t<option value=\"7\">Mind, Body, Spirit</option>\r\n\t\t\t\t\t\t\t<option value=\"8\">You, Your Current Path, Your Potential</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName={\"selectIcon\"}\r\n\t\t\t\t\t\t\tonClick={handleSelectOnClick}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<img src=\"https://img.icons8.com/metro/26/ACACAC/expand-arrow.png\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype={\"submit\"}\r\n\t\t\t\t\tclassName=\"saveBtn\"\r\n\t\t\t\t\tdisabled={selectedVal === \"0\"}\r\n\t\t\t\t>\r\n\t\t\t\t\tSave Spread\r\n\t\t\t\t</button>\r\n\t\t\t\t<div ref={errorMessageRef}></div>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SaveSpread;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { PastSpreadsContext } from \"../hooks/PastSpreadsContextController\";\r\nimport { SavedSpreadNeedReloadContext } from \"../hooks/SavedSpreadNeedReloadContextController\";\r\nimport { JwtContext } from \"../hooks/UserJWTContextController\";\r\n\r\nimport \"../styles/PastSpreads.css\";\r\n\r\nfunction PastSpread(): JSX.Element {\r\n\r\n\tconst { pastSpreads, setPastSpreads } = useContext( PastSpreadsContext );\r\n\tconst { jwt } = useContext( JwtContext );\r\n\tconst { needReload, setNeedReload } = useContext( SavedSpreadNeedReloadContext );\r\n\r\n\tuseEffect(() => {\r\n\t\tif ( needReload && jwt ) {\r\n\t\t\tfetch( `${ process.env.REACT_APP_API_URL }/userInfo/past_spread`, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tauthorization: `Bearer ${ jwt }`,\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t\t\t.then( res => res.json())\r\n\t\t\t\t.then(( pastSpreadData: PastSpreadsApiReturn[] ) => {\r\n\t\t\t\t\tsetPastSpreads( pastSpreadData );\r\n\t\t\t\t\tsetNeedReload( false );\r\n\t\t\t\t});\r\n\t\t}\r\n\t}, [jwt] );\r\n\r\n\tfunction formattedSavedSpreads() : JSX.Element[] {\r\n\t\tconst formattedSpreads = [] as JSX.Element[];\r\n\t\tlet cardDirections;\r\n\t\tfor ( let i = 0; i < pastSpreads.length; i += 3 ) {\r\n\t\t\t//\"101\" or up down up for direction into [\"1\",\"0\",\"1\"] for conditional checking\r\n\t\t\tcardDirections = pastSpreads[i].direction.split( \"\" );\r\n\t\t\tformattedSpreads.push(\r\n\t\t\t\t<table key={i}>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th colSpan={4}>{\r\n\t\t\t\t\t\t\t\t`${ new Date( new Date( pastSpreads[i].date_drawn ).getTime() - new Date().getTimezoneOffset()).toLocaleDateString() } ` +\r\n\t\t\t\t\t\t\t\t`${ pastSpreads[i].card_one_spread_meaning } ` +\r\n\t\t\t\t\t\t\t\t`${ pastSpreads[i].card_two_spread_meaning } ` +\r\n\t\t\t\t\t\t\t\t`${ pastSpreads[i].card_three_spread_meaning }`\r\n\t\t\t\t\t\t\t}</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td>{pastSpreads[i].card_name}</td>\r\n\t\t\t\t\t\t\t<td>{pastSpreads[i].element}</td>\r\n\t\t\t\t\t\t\t<td>{cardDirections[0] === \"1\" ? \"Up\" : \"Down\"}</td>\r\n\t\t\t\t\t\t\t<td>{cardDirections[0] === \"1\" ? pastSpreads[i].card_meaning_up : pastSpreads[i].card_meaning_down}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td>{pastSpreads[i+1].card_name}</td>\r\n\t\t\t\t\t\t\t<td>{pastSpreads[i+1].element}</td>\r\n\t\t\t\t\t\t\t<td>{cardDirections[1] === \"1\" ? \"Up\" : \"Down\"}</td>\r\n\t\t\t\t\t\t\t<td>{cardDirections[1] === \"1\" ? pastSpreads[i+1].card_meaning_up : pastSpreads[i+1].card_meaning_down}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td>{pastSpreads[i+2].card_name}</td>\r\n\t\t\t\t\t\t\t<td>{pastSpreads[i+2].element}</td>\r\n\t\t\t\t\t\t\t<td>{cardDirections[2] === \"1\" ? \"Up\" : \"Down\"}</td>\r\n\t\t\t\t\t\t\t<td>{cardDirections[2] === \"1\" ? pastSpreads[i+2].card_meaning_up : pastSpreads[i+2].card_meaning_down}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>,\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn formattedSpreads;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"savedSpreads\">\r\n\t\t\t{\r\n\t\t\t\t!needReload && pastSpreads.length && jwt &&  formattedSavedSpreads()\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default PastSpread;\r\n","import { useContext } from \"react\";\r\nimport { PopoutContext } from \"../hooks/PopoutContextController\";\r\nimport { DisplayedMenuContext } from \"../hooks/DisplayedMenuContextController\";\r\n\r\nimport \"../styles/Popout.css\";\r\n\r\nimport { EPopupMenus } from \"../utils/EPopupMenus\";\r\nimport SpreadInfo from \"./SpreadInfo\";\r\nimport SaveSpread from \"./SaveSpread\";\r\nimport PastSpread from \"./PastSpread\";\r\n\r\nfunction Popout(): JSX.Element {\r\n\tconst {\r\n\t\tpopout: [popoutOpen, popoutInitialClick],\r\n\t} = useContext( PopoutContext );\r\n\tconst { displayedMenu } = useContext( DisplayedMenuContext );\r\n\r\n\tfunction getCurrentDisplayedMenuElement(): JSX.Element {\r\n\t\t//Stupid type coehersion for enum to a number\r\n\t\tswitch ( +displayedMenu ) {\r\n\t\t\tcase EPopupMenus.SpreadInfo:\r\n\t\t\t\treturn ( <SpreadInfo /> );\r\n\t\t\tcase EPopupMenus.PastSpread:\r\n\t\t\t\treturn ( <PastSpread /> );\r\n\t\t\tcase EPopupMenus.SaveSpread:\r\n\t\t\t\treturn ( <SaveSpread /> );\r\n\t\t\tdefault:\r\n\t\t\t\treturn ( <div>HIT DEFAULT?</div> );\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={`${ popoutOpen ? \"slide-in-left\" : \"slide-out-left\" } popout default-border-radius`}\r\n\t\t\tstyle={{ display: popoutInitialClick ? \"none\" : \"block\" }}\r\n\t\t>\r\n\t\t\t{\r\n\t\t\t\tgetCurrentDisplayedMenuElement()\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Popout;\r\n","import \"../lib/env\"; //conditional render of development or production env variables COMMENT OUT FOR DEPLOYMENT ON HEROKU\r\n\r\nimport { useState } from \"react\";\r\nimport \"../styles/App.css\";\r\nimport Header from \"./Header\";\r\nimport CardMat from \"./CardMat\";\r\nimport CommandBar from \"./CommandBar\";\r\nimport Popout from \"./Popout\";\r\nimport { PopoutProvider } from \"../hooks/PopoutContextController\";\r\nimport { DrawnCardProvider } from \"../hooks/DrawnCardsContextController\";\r\nimport { DisplayedMenuProvider } from \"../hooks/DisplayedMenuContextController\";\r\nimport { SavedSpreadNeedReloadProvider } from \"../hooks/SavedSpreadNeedReloadContextController\";\r\nimport { JWTProvider } from \"../hooks/UserJWTContextController\";\r\nimport { EPopupMenus } from \"../utils/EPopupMenus\";\r\nimport { PastSpreadsProvider } from \"../hooks/PastSpreadsContextController\";\r\n\r\nfunction App(): JSX.Element {\r\n\tconst [popout, setPopout] = useState( [false, true] as [boolean, boolean] );\r\n\tconst [cardsDrawn, setCardsDrawn] = useState( [] as CardApiReturn[] );\r\n\tconst [displayedMenu, setDisplayedMenu] = useState( EPopupMenus.SpreadInfo );\r\n\tconst [jwt, setJwt] = useState( \"\" );\r\n\tconst [needReload, setNeedReload] = useState( true );\r\n\tconst [pastSpreads, setPastSpreads] = useState( [{}] as PastSpreadsApiReturn[] );\r\n\r\n\r\n\treturn (\r\n\t\t<div className={\"programContainer\"}>\r\n\t\t\t<JWTProvider value={{ jwt, setJwt }}>\r\n\t\t\t\t<PastSpreadsProvider value={{ pastSpreads, setPastSpreads }}>\r\n\t\t\t\t\t<SavedSpreadNeedReloadProvider value={{ needReload, setNeedReload }}>\r\n\t\t\t\t\t\t<Header />\r\n\t\t\t\t\t\t<DrawnCardProvider value={{ cardsDrawn, setCardsDrawn }}>\r\n\t\t\t\t\t\t\t<PopoutProvider value={{ popout, setPopout }}>\r\n\t\t\t\t\t\t\t\t<DisplayedMenuProvider value={{ displayedMenu, setDisplayedMenu }} >\r\n\r\n\t\t\t\t\t\t\t\t\t<Popout />\r\n\t\t\t\t\t\t\t\t\t<CardMat />\r\n\t\t\t\t\t\t\t\t\t<CommandBar />\r\n\r\n\r\n\t\t\t\t\t\t\t\t</DisplayedMenuProvider>\r\n\t\t\t\t\t\t\t</PopoutProvider>\r\n\t\t\t\t\t\t</DrawnCardProvider>\r\n\t\t\t\t\t</SavedSpreadNeedReloadProvider>\r\n\t\t\t\t</PastSpreadsProvider>\r\n\t\t\t</JWTProvider>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById( \"root\" ),\r\n);\r\n"],"sourceRoot":""}